#+title: Hirundia
#+startup: indent showall

* dev

** clj
- Jack-in repl `C-c M-j` 
- Open dev/user.clj and evaluate `C-c C-k`
- reharden reset in repl 

which is:
#+BEGIN_SRC clojure
 (do
        (clojure.core/require 'clojure.tools.namespace.repl)
        (clojure.core/require 'com.stuartsierra.component.repl)
        ((clojure.core/resolve 'clojure.tools.namespace.repl/set-refresh-dirs) "src" "test")
        (try
          ((clojure.core/resolve 'com.stuartsierra.component.repl/reset))
          (catch java.lang.Throwable v
            (clojure.core/when (clojure.core/instance? java.io.FileNotFoundException v)
              ((clojure.core/resolve 'clojure.tools.namespace.repl/clear)))
            (clojure.core/when ((clojure.core/resolve 'com.stuartsierra.component/ex-component?) v)
              (clojure.core/let [stop (clojure.core/resolve 'com.stuartsierra.component/stop)]
                (clojure.core/some-> v clojure.core/ex-data :system stop)))
            (throw v)))) 

#+END_SRC

** cljs
To start a figwheel repl in cider spawn a repl:
- `M-x cider-connect-sibling-cljs`
- `(require '[figwheel-sidecar.repl.api :as fw])`
- `(fw/start-figwheel)
- `(fw/cljs-repl)

and ready to go.

** TODO automate figwheel repl
-> there still seem to be an issue with having the two environment:
when reharden-reset the figwheel is discarded and that needs restarting too...
 
So I need to automate the cljs startup and find a way to add it to reharden-reset.

* DB

** troubleshooting

*** if postgres process isn't running repl won't start.
  when I get : server can't start kind of error...:
  in `/var/run`: 
  ;;[adam@adam-pc run]$ sudo mkdir postgresql
  ;;[adam@adam-pc run]$ sudo chown -R postgres:postgres /var/run/postgresql
  ;;[adam@adam-pc run]$ sudo -u postgres -i

  ;;starting server:

  ;;[postgres@adam-pc ~]$ pg_ctl -D /user/local/pgsql/data -l logfile start
  ;;waiting for server to start.... done
  ;;server started


 *Better*
  - access with:
   
  `pg_ctl -D /var/lib/postgres/data/ -l logfile start`

*For psql*
connect to db (local development)
`\c hirundia_dev`


* Deployment 


** cljs 
There's a `:prod` cljsbuild profile. and an externs.js file in root
(for Leaflet, as vega-lite is wrapped in Oz))

** TODO uberjar
An experimental :uberjar profile :
potentially can hold `:prep-tasks ["compile" ["cljsbuild" "once" "prod"]]
** Heroku
set an Heroku git remote,


*Example:* checkout to a git branch named something like `heroku-deployment`:

/Heroku accepts push only to master./

Delete manually `app.js`:
`rm resources/public/js/compiled/app.js`

`lein clean`

`lein cljsbuild once prod`

stage and commit all changes.



`git push heroku herokudeployment:master`
might need to force (using -f)


